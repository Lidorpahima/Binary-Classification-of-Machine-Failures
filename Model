{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lidorpahima/notebook6c15da1987?scriptVersionId=191790242\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"63f90353","metadata":{"papermill":{"duration":0.006849,"end_time":"2024-08-09T13:14:11.643244","exception":false,"start_time":"2024-08-09T13:14:11.636395","status":"completed"},"tags":[]},"source":["**1 Import train csv**"]},{"cell_type":"code","execution_count":1,"id":"f0934385","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-08-09T13:14:11.65808Z","iopub.status.busy":"2024-08-09T13:14:11.657611Z","iopub.status.idle":"2024-08-09T13:14:12.840311Z","shell.execute_reply":"2024-08-09T13:14:12.839333Z"},"papermill":{"duration":1.192929,"end_time":"2024-08-09T13:14:12.842637","exception":false,"start_time":"2024-08-09T13:14:11.649708","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Product ID</th>\n","      <th>Type</th>\n","      <th>Air temperature [K]</th>\n","      <th>Process temperature [K]</th>\n","      <th>Rotational speed [rpm]</th>\n","      <th>Torque [Nm]</th>\n","      <th>Tool wear [min]</th>\n","      <th>Machine failure</th>\n","      <th>TWF</th>\n","      <th>HDF</th>\n","      <th>PWF</th>\n","      <th>OSF</th>\n","      <th>RNF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>L50096</td>\n","      <td>L</td>\n","      <td>300.6</td>\n","      <td>309.6</td>\n","      <td>1596</td>\n","      <td>36.1</td>\n","      <td>140</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>M20343</td>\n","      <td>M</td>\n","      <td>302.6</td>\n","      <td>312.1</td>\n","      <td>1759</td>\n","      <td>29.1</td>\n","      <td>200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>L49454</td>\n","      <td>L</td>\n","      <td>299.3</td>\n","      <td>308.5</td>\n","      <td>1805</td>\n","      <td>26.5</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>L53355</td>\n","      <td>L</td>\n","      <td>301.0</td>\n","      <td>310.9</td>\n","      <td>1524</td>\n","      <td>44.3</td>\n","      <td>197</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>M24050</td>\n","      <td>M</td>\n","      <td>298.0</td>\n","      <td>309.0</td>\n","      <td>1641</td>\n","      <td>35.4</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   id Product ID Type  Air temperature [K]  Process temperature [K]  \\\n","0   0     L50096    L                300.6                    309.6   \n","1   1     M20343    M                302.6                    312.1   \n","2   2     L49454    L                299.3                    308.5   \n","3   3     L53355    L                301.0                    310.9   \n","4   4     M24050    M                298.0                    309.0   \n","\n","   Rotational speed [rpm]  Torque [Nm]  Tool wear [min]  Machine failure  TWF  \\\n","0                    1596         36.1              140                0    0   \n","1                    1759         29.1              200                0    0   \n","2                    1805         26.5               25                0    0   \n","3                    1524         44.3              197                0    0   \n","4                    1641         35.4               34                0    0   \n","\n","   HDF  PWF  OSF  RNF  \n","0    0    0    0    0  \n","1    0    0    0    0  \n","2    0    0    0    0  \n","3    0    0    0    0  \n","4    0    0    0    0  "]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["import numpy as np\n","import pandas as pd\n","\n","train_fd = pd.read_csv(\"/kaggle/input/train-csv/train.csv\") #read test\n","train_fd.head() # print head of the test"]},{"cell_type":"code","execution_count":2,"id":"b3ba7ec6","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:12.857989Z","iopub.status.busy":"2024-08-09T13:14:12.857304Z","iopub.status.idle":"2024-08-09T13:14:12.899154Z","shell.execute_reply":"2024-08-09T13:14:12.89783Z"},"papermill":{"duration":0.052275,"end_time":"2024-08-09T13:14:12.901671","exception":false,"start_time":"2024-08-09T13:14:12.849396","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 136429 entries, 0 to 136428\n","Data columns (total 14 columns):\n"," #   Column                   Non-Null Count   Dtype  \n","---  ------                   --------------   -----  \n"," 0   id                       136429 non-null  int64  \n"," 1   Product ID               136429 non-null  object \n"," 2   Type                     136429 non-null  object \n"," 3   Air temperature [K]      136429 non-null  float64\n"," 4   Process temperature [K]  136429 non-null  float64\n"," 5   Rotational speed [rpm]   136429 non-null  int64  \n"," 6   Torque [Nm]              136429 non-null  float64\n"," 7   Tool wear [min]          136429 non-null  int64  \n"," 8   Machine failure          136429 non-null  int64  \n"," 9   TWF                      136429 non-null  int64  \n"," 10  HDF                      136429 non-null  int64  \n"," 11  PWF                      136429 non-null  int64  \n"," 12  OSF                      136429 non-null  int64  \n"," 13  RNF                      136429 non-null  int64  \n","dtypes: float64(3), int64(9), object(2)\n","memory usage: 14.6+ MB\n","None\n"]}],"source":["print(train_fd.info()) #colmun info"]},{"cell_type":"markdown","id":"dc4a7142","metadata":{"papermill":{"duration":0.007103,"end_time":"2024-08-09T13:14:12.915669","exception":false,"start_time":"2024-08-09T13:14:12.908566","status":"completed"},"tags":[]},"source":["**2 remove id and product column**"]},{"cell_type":"code","execution_count":3,"id":"2bb4f09d","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:12.931115Z","iopub.status.busy":"2024-08-09T13:14:12.930722Z","iopub.status.idle":"2024-08-09T13:14:12.953169Z","shell.execute_reply":"2024-08-09T13:14:12.952125Z"},"papermill":{"duration":0.033252,"end_time":"2024-08-09T13:14:12.955896","exception":false,"start_time":"2024-08-09T13:14:12.922644","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Type</th>\n","      <th>Air temperature [K]</th>\n","      <th>Process temperature [K]</th>\n","      <th>Rotational speed [rpm]</th>\n","      <th>Torque [Nm]</th>\n","      <th>Tool wear [min]</th>\n","      <th>Machine failure</th>\n","      <th>TWF</th>\n","      <th>HDF</th>\n","      <th>PWF</th>\n","      <th>OSF</th>\n","      <th>RNF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>L</td>\n","      <td>300.6</td>\n","      <td>309.6</td>\n","      <td>1596</td>\n","      <td>36.1</td>\n","      <td>140</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M</td>\n","      <td>302.6</td>\n","      <td>312.1</td>\n","      <td>1759</td>\n","      <td>29.1</td>\n","      <td>200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>L</td>\n","      <td>299.3</td>\n","      <td>308.5</td>\n","      <td>1805</td>\n","      <td>26.5</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>L</td>\n","      <td>301.0</td>\n","      <td>310.9</td>\n","      <td>1524</td>\n","      <td>44.3</td>\n","      <td>197</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M</td>\n","      <td>298.0</td>\n","      <td>309.0</td>\n","      <td>1641</td>\n","      <td>35.4</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n","0    L                300.6                    309.6                    1596   \n","1    M                302.6                    312.1                    1759   \n","2    L                299.3                    308.5                    1805   \n","3    L                301.0                    310.9                    1524   \n","4    M                298.0                    309.0                    1641   \n","\n","   Torque [Nm]  Tool wear [min]  Machine failure  TWF  HDF  PWF  OSF  RNF  \n","0         36.1              140                0    0    0    0    0    0  \n","1         29.1              200                0    0    0    0    0    0  \n","2         26.5               25                0    0    0    0    0    0  \n","3         44.3              197                0    0    0    0    0    0  \n","4         35.4               34                0    0    0    0    0    0  "]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["train_fd = train_fd.drop(columns=['id', 'Product ID']) #remove id and product column\n","train_fd.head()"]},{"cell_type":"code","execution_count":4,"id":"722c2361","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:12.971747Z","iopub.status.busy":"2024-08-09T13:14:12.971411Z","iopub.status.idle":"2024-08-09T13:14:12.983545Z","shell.execute_reply":"2024-08-09T13:14:12.982394Z"},"papermill":{"duration":0.022806,"end_time":"2024-08-09T13:14:12.985907","exception":false,"start_time":"2024-08-09T13:14:12.963101","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Machine failure\n","0    134281\n","1      2148\n","Name: count, dtype: int64\n"]}],"source":["counts = train_fd['Machine failure'].value_counts() #count of 1 and 0 in machine failure column\n","print(counts) #print result"]},{"cell_type":"markdown","id":"b02ffe94","metadata":{"papermill":{"duration":0.006803,"end_time":"2024-08-09T13:14:12.9998","exception":false,"start_time":"2024-08-09T13:14:12.992997","status":"completed"},"tags":[]},"source":["**3 replace H > 0 M > 1 L > 2**"]},{"cell_type":"code","execution_count":5,"id":"4a2077fe","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:13.016162Z","iopub.status.busy":"2024-08-09T13:14:13.015153Z","iopub.status.idle":"2024-08-09T13:14:13.086311Z","shell.execute_reply":"2024-08-09T13:14:13.085113Z"},"papermill":{"duration":0.082199,"end_time":"2024-08-09T13:14:13.088917","exception":false,"start_time":"2024-08-09T13:14:13.006718","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_18/1181466908.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  train_fd['Type'] = train_fd['Type'].replace({'H': 0, 'M': 1, 'L': 2}) #replace H > 0 M > 1 L > 2\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Type</th>\n","      <th>Air temperature [K]</th>\n","      <th>Process temperature [K]</th>\n","      <th>Rotational speed [rpm]</th>\n","      <th>Torque [Nm]</th>\n","      <th>Tool wear [min]</th>\n","      <th>Machine failure</th>\n","      <th>TWF</th>\n","      <th>HDF</th>\n","      <th>PWF</th>\n","      <th>OSF</th>\n","      <th>RNF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>300.6</td>\n","      <td>309.6</td>\n","      <td>1596</td>\n","      <td>36.1</td>\n","      <td>140</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>302.6</td>\n","      <td>312.1</td>\n","      <td>1759</td>\n","      <td>29.1</td>\n","      <td>200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>299.3</td>\n","      <td>308.5</td>\n","      <td>1805</td>\n","      <td>26.5</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>301.0</td>\n","      <td>310.9</td>\n","      <td>1524</td>\n","      <td>44.3</td>\n","      <td>197</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>298.0</td>\n","      <td>309.0</td>\n","      <td>1641</td>\n","      <td>35.4</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n","0     2                300.6                    309.6                    1596   \n","1     1                302.6                    312.1                    1759   \n","2     2                299.3                    308.5                    1805   \n","3     2                301.0                    310.9                    1524   \n","4     1                298.0                    309.0                    1641   \n","\n","   Torque [Nm]  Tool wear [min]  Machine failure  TWF  HDF  PWF  OSF  RNF  \n","0         36.1              140                0    0    0    0    0    0  \n","1         29.1              200                0    0    0    0    0    0  \n","2         26.5               25                0    0    0    0    0    0  \n","3         44.3              197                0    0    0    0    0    0  \n","4         35.4               34                0    0    0    0    0    0  "]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["train_fd['Type'] = train_fd['Type'].replace({'H': 0, 'M': 1, 'L': 2}) #replace H > 0 M > 1 L > 2\n","train_fd.head() # print check"]},{"cell_type":"markdown","id":"3eb3c8b8","metadata":{"papermill":{"duration":0.007903,"end_time":"2024-08-09T13:14:13.104224","exception":false,"start_time":"2024-08-09T13:14:13.096321","status":"completed"},"tags":[]},"source":["**5 MinMaxScaler**"]},{"cell_type":"code","execution_count":6,"id":"79c7c483","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:13.120733Z","iopub.status.busy":"2024-08-09T13:14:13.120369Z","iopub.status.idle":"2024-08-09T13:14:14.301786Z","shell.execute_reply":"2024-08-09T13:14:14.300722Z"},"papermill":{"duration":1.19251,"end_time":"2024-08-09T13:14:14.304087","exception":false,"start_time":"2024-08-09T13:14:13.111577","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["   Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n","0   1.0             0.582418                   0.4750                0.243402   \n","1   0.5             0.802198                   0.7875                0.339003   \n","2   1.0             0.439560                   0.3375                0.365982   \n","3   1.0             0.626374                   0.6375                0.201173   \n","4   0.5             0.296703                   0.4000                0.269795   \n","\n","   Torque [Nm]  Tool wear [min]  Machine failure  TWF  HDF  PWF  OSF  RNF  \n","0     0.443681         0.553360              0.0  0.0  0.0  0.0  0.0  0.0  \n","1     0.347527         0.790514              0.0  0.0  0.0  0.0  0.0  0.0  \n","2     0.311813         0.098814              0.0  0.0  0.0  0.0  0.0  0.0  \n","3     0.556319         0.778656              0.0  0.0  0.0  0.0  0.0  0.0  \n","4     0.434066         0.134387              0.0  0.0  0.0  0.0  0.0  0.0  \n"]}],"source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler() #MinMaxScaler new object\n","scaled_data = scaler.fit_transform(train_fd) #fit scalar with data\n","scaled_df = pd.DataFrame(scaled_data, columns=train_fd.columns) #return with data frame\n","print(scaled_df.head()) #print after normalization"]},{"cell_type":"markdown","id":"02740312","metadata":{"papermill":{"duration":0.007355,"end_time":"2024-08-09T13:14:14.319018","exception":false,"start_time":"2024-08-09T13:14:14.311663","status":"completed"},"tags":[]},"source":["**6 Split 80% train 20% test random**"]},{"cell_type":"code","execution_count":7,"id":"7d83c910","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:14.335412Z","iopub.status.busy":"2024-08-09T13:14:14.335036Z","iopub.status.idle":"2024-08-09T13:14:14.472329Z","shell.execute_reply":"2024-08-09T13:14:14.471294Z"},"papermill":{"duration":0.148189,"end_time":"2024-08-09T13:14:14.474627","exception":false,"start_time":"2024-08-09T13:14:14.326438","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["x_train shape: (109143, 11)\n","x_test shape: (27286, 11)\n","y_train shape: (109143,)\n","y_test shape: (27286,)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","X = scaled_df.drop(columns=['Machine failure'])  # remove column Machine failure before split with test\n","y = scaled_df['Machine failure'] # save the data from column Machine failure\n","\n","# Split 80% train 20% test random\n","x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# print train and test shape\n","print(f\"x_train shape: {x_train.shape}\")\n","print(f\"x_test shape: {x_test.shape}\")\n","print(f\"y_train shape: {y_train.shape}\")\n","print(f\"y_test shape: {y_test.shape}\")"]},{"cell_type":"markdown","id":"a73b4478","metadata":{"papermill":{"duration":0.007321,"end_time":"2024-08-09T13:14:14.489741","exception":false,"start_time":"2024-08-09T13:14:14.48242","status":"completed"},"tags":[]},"source":["**7a coefficients and intercept**"]},{"cell_type":"code","execution_count":8,"id":"62085672","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:14.506413Z","iopub.status.busy":"2024-08-09T13:14:14.50601Z","iopub.status.idle":"2024-08-09T13:14:15.034842Z","shell.execute_reply":"2024-08-09T13:14:15.033674Z"},"papermill":{"duration":0.541058,"end_time":"2024-08-09T13:14:15.03831","exception":false,"start_time":"2024-08-09T13:14:14.497252","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["W (coefficients): [[ 0.26782888  2.38323478 -1.5247079   3.38200558  6.6369562   1.20194905\n","   8.327412    8.29474729  8.75838535  8.00450503 -0.04536508]]\n","B (intercept): [-10.87183275]\n"]}],"source":["from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression() # create object LogisticRegression\n","model.fit(x_train, y_train)\n","W = model.coef_ #coefficients\n","B = model.intercept_ #intercept\n","\n","print(\"W (coefficients):\", W)\n","print(\"B (intercept):\", B)"]},{"cell_type":"markdown","id":"3151ddfb","metadata":{"papermill":{"duration":0.012045,"end_time":"2024-08-09T13:14:15.063722","exception":false,"start_time":"2024-08-09T13:14:15.051677","status":"completed"},"tags":[]},"source":["**7b accuracy precision recall**"]},{"cell_type":"code","execution_count":9,"id":"904823c8","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.091162Z","iopub.status.busy":"2024-08-09T13:14:15.090459Z","iopub.status.idle":"2024-08-09T13:14:15.300583Z","shell.execute_reply":"2024-08-09T13:14:15.299534Z"},"papermill":{"duration":0.226757,"end_time":"2024-08-09T13:14:15.303041","exception":false,"start_time":"2024-08-09T13:14:15.076284","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train Accuracy: 0.9961609997892673\n","Train Precision: 0.992372234935164\n","Train Recall: 0.7608187134502924\n","Test Accuracy: 0.9961518727552591\n","Test Precision: 0.9911504424778761\n","Test Recall: 0.7671232876712328\n"]}],"source":["from sklearn.metrics import accuracy_score, precision_score, recall_score\n","\n","y_train_pred = model.predict(x_train)\n","y_test_pred = model.predict(x_test)\n","\n","train_accuracy = accuracy_score(y_train, y_train_pred)\n","train_precision = precision_score(y_train, y_train_pred, pos_label=1)\n","train_recall = recall_score(y_train, y_train_pred, pos_label=1)\n","\n","test_accuracy = accuracy_score(y_test, y_test_pred)\n","test_precision = precision_score(y_test, y_test_pred, pos_label=1)\n","test_recall = recall_score(y_test, y_test_pred, pos_label=1)\n","\n","print(\"Train Accuracy:\", train_accuracy)\n","print(\"Train Precision:\", train_precision)\n","print(\"Train Recall:\", train_recall)\n","print(\"Test Accuracy:\", test_accuracy)\n","print(\"Test Precision:\", test_precision)\n","print(\"Test Recall:\", test_recall)"]},{"cell_type":"markdown","id":"505e1cfd","metadata":{"papermill":{"duration":0.007971,"end_time":"2024-08-09T13:14:15.319115","exception":false,"start_time":"2024-08-09T13:14:15.311144","status":"completed"},"tags":[]},"source":["**7c Confusion Matrix**"]},{"cell_type":"code","execution_count":10,"id":"2f0c6122","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.336176Z","iopub.status.busy":"2024-08-09T13:14:15.335792Z","iopub.status.idle":"2024-08-09T13:14:15.437511Z","shell.execute_reply":"2024-08-09T13:14:15.436489Z"},"papermill":{"duration":0.11298,"end_time":"2024-08-09T13:14:15.439859","exception":false,"start_time":"2024-08-09T13:14:15.326879","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix for Training Data:\n","[[107423     10]\n"," [   409   1301]]\n","\n","Confusion Matrix for Test Data:\n","[[26845     3]\n"," [  102   336]]\n"]}],"source":["from sklearn.metrics import confusion_matrix\n","\n","train_confusion_matrix = confusion_matrix(y_train, y_train_pred)\n","\n","test_confusion_matrix = confusion_matrix(y_test, y_test_pred)\n","\n","print(\"Confusion Matrix for Training Data:\")\n","print(train_confusion_matrix)\n","\n","print(\"\\nConfusion Matrix for Test Data:\")\n","print(test_confusion_matrix)"]},{"cell_type":"markdown","id":"0d643f80","metadata":{"papermill":{"duration":0.007427,"end_time":"2024-08-09T13:14:15.455262","exception":false,"start_time":"2024-08-09T13:14:15.447835","status":"completed"},"tags":[]},"source":["Retest without colmuns 'TWF', 'HDF','PWF','OSF','RNF'"]},{"cell_type":"markdown","id":"63f6928b","metadata":{"papermill":{"duration":0.007468,"end_time":"2024-08-09T13:14:15.470501","exception":false,"start_time":"2024-08-09T13:14:15.463033","status":"completed"},"tags":[]},"source":["**8 remove 'TWF', 'HDF','PWF','OSF','RNF' columns**"]},{"cell_type":"code","execution_count":11,"id":"ac26fa81","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.488433Z","iopub.status.busy":"2024-08-09T13:14:15.48738Z","iopub.status.idle":"2024-08-09T13:14:15.519828Z","shell.execute_reply":"2024-08-09T13:14:15.518822Z"},"papermill":{"duration":0.043737,"end_time":"2024-08-09T13:14:15.522148","exception":false,"start_time":"2024-08-09T13:14:15.478411","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["   Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n","0     2                300.6                    309.6                    1596   \n","1     1                302.6                    312.1                    1759   \n","2     2                299.3                    308.5                    1805   \n","3     2                301.0                    310.9                    1524   \n","4     1                298.0                    309.0                    1641   \n","\n","   Torque [Nm]  Tool wear [min]  Machine failure  \n","0         36.1              140                0  \n","1         29.1              200                0  \n","2         26.5               25                0  \n","3         44.3              197                0  \n","4         35.4               34                0  \n","   Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n","0   1.0             0.582418                   0.4750                0.243402   \n","1   0.5             0.802198                   0.7875                0.339003   \n","2   1.0             0.439560                   0.3375                0.365982   \n","3   1.0             0.626374                   0.6375                0.201173   \n","4   0.5             0.296703                   0.4000                0.269795   \n","\n","   Torque [Nm]  Tool wear [min]  Machine failure  \n","0     0.443681         0.553360              0.0  \n","1     0.347527         0.790514              0.0  \n","2     0.311813         0.098814              0.0  \n","3     0.556319         0.778656              0.0  \n","4     0.434066         0.134387              0.0  \n"]}],"source":["train_fd = train_fd.drop(columns=['TWF', 'HDF','PWF','OSF','RNF']) #remove 'TWF', 'HDF','PWF','OSF','RNF' columns\n","print(train_fd.head())\n","\n","scaled_data = scaler.fit_transform(train_fd) #fit scalar with data\n","scaled_df = pd.DataFrame(scaled_data, columns=train_fd.columns) #return with data frame\n","print(scaled_df.head()) #print after normalization"]},{"cell_type":"code","execution_count":12,"id":"43d5f6c6","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.540523Z","iopub.status.busy":"2024-08-09T13:14:15.539653Z","iopub.status.idle":"2024-08-09T13:14:15.558983Z","shell.execute_reply":"2024-08-09T13:14:15.557975Z"},"papermill":{"duration":0.031421,"end_time":"2024-08-09T13:14:15.561682","exception":false,"start_time":"2024-08-09T13:14:15.530261","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["x_train shape: (109143, 6)\n","x_test shape: (27286, 6)\n","y_train shape: (109143,)\n","y_test shape: (27286,)\n"]}],"source":["X = scaled_df.drop(columns=['Machine failure'])  # remove column Machine failure before split with test\n","y = scaled_df['Machine failure'] # save the data from column Machine failure\n","\n","# Split 80% train 20% test random\n","x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# print train and test shape\n","print(f\"x_train shape: {x_train.shape}\")\n","print(f\"x_test shape: {x_test.shape}\")\n","print(f\"y_train shape: {y_train.shape}\")\n","print(f\"y_test shape: {y_test.shape}\") "]},{"cell_type":"code","execution_count":13,"id":"f803b2da","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.579809Z","iopub.status.busy":"2024-08-09T13:14:15.579164Z","iopub.status.idle":"2024-08-09T13:14:15.899859Z","shell.execute_reply":"2024-08-09T13:14:15.898748Z"},"papermill":{"duration":0.332856,"end_time":"2024-08-09T13:14:15.902925","exception":false,"start_time":"2024-08-09T13:14:15.570069","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["W (coefficients): [[ 0.39165779  5.64149037 -4.25384637  4.85655489 11.29063732  1.94864934]]\n","B (intercept): [-13.40779757]\n"]}],"source":["model = LogisticRegression() # create object LogisticRegression\n","model.fit(x_train, y_train)\n","W = model.coef_ #coefficients\n","B = model.intercept_ #intercept\n","\n","print(\"W (coefficients):\", W)\n","print(\"B (intercept):\", B)"]},{"cell_type":"code","execution_count":14,"id":"c01ebe4b","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:15.933318Z","iopub.status.busy":"2024-08-09T13:14:15.932793Z","iopub.status.idle":"2024-08-09T13:14:16.076001Z","shell.execute_reply":"2024-08-09T13:14:16.074493Z"},"papermill":{"duration":0.160926,"end_time":"2024-08-09T13:14:16.078515","exception":false,"start_time":"2024-08-09T13:14:15.917589","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix for Training Data:\n","[[107423     10]\n"," [   409   1301]]\n","\n","Confusion Matrix for Test Data:\n","[[26845     3]\n"," [  102   336]]\n"]}],"source":["train_confusion_matrix = confusion_matrix(y_train, y_train_pred)\n","\n","test_confusion_matrix = confusion_matrix(y_test, y_test_pred)\n","\n","print(\"Confusion Matrix for Training Data:\")\n","print(train_confusion_matrix)\n","\n","print(\"\\nConfusion Matrix for Test Data:\")\n","print(test_confusion_matrix)\n"]},{"cell_type":"code","execution_count":15,"id":"2e8bc90a","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:16.096793Z","iopub.status.busy":"2024-08-09T13:14:16.096416Z","iopub.status.idle":"2024-08-09T13:14:16.300794Z","shell.execute_reply":"2024-08-09T13:14:16.299826Z"},"papermill":{"duration":0.216198,"end_time":"2024-08-09T13:14:16.303087","exception":false,"start_time":"2024-08-09T13:14:16.086889","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train Accuracy: 0.9845981876987072\n","Train Precision: 0.7636363636363637\n","Train Recall: 0.02456140350877193\n","Test Accuracy: 0.9842043538811112\n","Test Precision: 0.8181818181818182\n","Test Recall: 0.02054794520547945\n"]}],"source":["y_train_pred = model.predict(x_train)\n","y_test_pred = model.predict(x_test)\n","\n","train_accuracy = accuracy_score(y_train, y_train_pred)\n","train_precision = precision_score(y_train, y_train_pred, pos_label=1)\n","train_recall = recall_score(y_train, y_train_pred, pos_label=1)\n","\n","test_accuracy = accuracy_score(y_test, y_test_pred)\n","test_precision = precision_score(y_test, y_test_pred, pos_label=1)\n","test_recall = recall_score(y_test, y_test_pred, pos_label=1)\n","\n","# הצגת המדדים\n","print(\"Train Accuracy:\", train_accuracy)\n","print(\"Train Precision:\", train_precision)\n","print(\"Train Recall:\", train_recall)\n","print(\"Test Accuracy:\", test_accuracy)\n","print(\"Test Precision:\", test_precision)\n","print(\"Test Recall:\", test_recall)"]},{"cell_type":"markdown","id":"bcb8aba0","metadata":{"papermill":{"duration":0.007913,"end_time":"2024-08-09T13:14:16.319211","exception":false,"start_time":"2024-08-09T13:14:16.311298","status":"completed"},"tags":[]},"source":["**9 Decision Tree and kNN**"]},{"cell_type":"markdown","id":"c1b4674e","metadata":{"papermill":{"duration":0.00797,"end_time":"2024-08-09T13:14:16.335418","exception":false,"start_time":"2024-08-09T13:14:16.327448","status":"completed"},"tags":[]},"source":["**DecisionTreeClassifier**"]},{"cell_type":"code","execution_count":16,"id":"40f145b7","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:16.353342Z","iopub.status.busy":"2024-08-09T13:14:16.352963Z","iopub.status.idle":"2024-08-09T13:14:19.236339Z","shell.execute_reply":"2024-08-09T13:14:19.23514Z"},"papermill":{"duration":2.895201,"end_time":"2024-08-09T13:14:19.23869","exception":false,"start_time":"2024-08-09T13:14:16.343489","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Decision Tree with max_depth=5\n","Train Accuracy: 0.9864856197832201\n","Train Precision: 0.6705370101596516\n","Train Recall: 0.27017543859649124\n","Test Accuracy: 0.9855237117935938\n","Test Precision: 0.6149732620320856\n","Test Recall: 0.2625570776255708\n","Confusion Matrix for Training Data:\n","[[107206    227]\n"," [  1248    462]]\n","Confusion Matrix for Test Data:\n","[[26776    72]\n"," [  323   115]]\n","\n","\n","Decision Tree with max_depth=8\n","Train Accuracy: 0.9884005387427504\n","Train Precision: 0.7466666666666667\n","Train Recall: 0.3929824561403509\n","Test Accuracy: 0.9848273840064502\n","Test Precision: 0.5512820512820513\n","Test Recall: 0.2945205479452055\n","Confusion Matrix for Training Data:\n","[[107205    228]\n"," [  1038    672]]\n","Confusion Matrix for Test Data:\n","[[26743   105]\n"," [  309   129]]\n","\n","\n","Decision Tree with max_depth=10\n","Train Accuracy: 0.9899856152020744\n","Train Precision: 0.8278427205100957\n","Train Recall: 0.45555555555555555\n","Test Accuracy: 0.9850106281609616\n","Test Precision: 0.5568627450980392\n","Test Recall: 0.3242009132420091\n","Confusion Matrix for Training Data:\n","[[107271    162]\n"," [   931    779]]\n","Confusion Matrix for Test Data:\n","[[26735   113]\n"," [  296   142]]\n","\n","\n","Decision Tree with max_depth=15\n","Train Accuracy: 0.9943926774964954\n","Train Precision: 0.9477977161500816\n","Train Recall: 0.6795321637426901\n","Test Accuracy: 0.9831415377849446\n","Test Precision: 0.46706586826347307\n","Test Recall: 0.3561643835616438\n","Confusion Matrix for Training Data:\n","[[107369     64]\n"," [   548   1162]]\n","Confusion Matrix for Test Data:\n","[[26670   178]\n"," [  282   156]]\n","\n","\n"]}],"source":["from sklearn.tree import DecisionTreeClassifier\n","# Split 80% train 20% test random\n","x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","configuration = [5,8,10,15] #we select 4 configuration and try to make the most accuracy depth for our tree\n","for i in configuration :#every loop we will try diffrent config\n","    DecTree_model = DecisionTreeClassifier(max_depth = i, random_state=42) #create tree with i depth\n","    DecTree_model.fit(x_train, y_train)#fiting\n","    y_train_pred = DecTree_model.predict(x_train) #make predict for train\n","    y_test_pred = DecTree_model.predict(x_test) #make predict for test\n","    #train result\n","    train_accuracy = accuracy_score(y_train, y_train_pred) #find the accuracy\n","    train_precision = precision_score(y_train, y_train_pred, pos_label=1) #find the precision\n","    train_recall = recall_score(y_train, y_train_pred, pos_label=1) #find the recall\n","    #test result\n","    test_accuracy = accuracy_score(y_test, y_test_pred) \n","    test_precision = precision_score(y_test, y_test_pred, pos_label=1)\n","    test_recall = recall_score(y_test, y_test_pred, pos_label=1)\n","    \n","    train_cm = confusion_matrix(y_train, y_train_pred)\n","    test_cm = confusion_matrix(y_test, y_test_pred)\n","    \n","    print(f\"Decision Tree with max_depth={i}\")\n","    print(\"Train Accuracy:\", train_accuracy)\n","    print(\"Train Precision:\", train_precision)\n","    print(\"Train Recall:\", train_recall)\n","    print(\"Test Accuracy:\", test_accuracy)\n","    print(\"Test Precision:\", test_precision)\n","    print(\"Test Recall:\", test_recall)\n","    print(\"Confusion Matrix for Training Data:\")\n","    print(train_cm)\n","    print(\"Confusion Matrix for Test Data:\")\n","    print(test_cm)\n","    print(\"\\n\")"]},{"cell_type":"markdown","id":"f6f854b5","metadata":{"papermill":{"duration":0.008362,"end_time":"2024-08-09T13:14:19.255875","exception":false,"start_time":"2024-08-09T13:14:19.247513","status":"completed"},"tags":[]},"source":["**KNeighborsClassifier**"]},{"cell_type":"code","execution_count":17,"id":"06c7ef6e","metadata":{"execution":{"iopub.execute_input":"2024-08-09T13:14:19.274572Z","iopub.status.busy":"2024-08-09T13:14:19.27422Z","iopub.status.idle":"2024-08-09T13:15:12.85102Z","shell.execute_reply":"2024-08-09T13:15:12.850002Z"},"papermill":{"duration":53.588977,"end_time":"2024-08-09T13:15:12.853433","exception":false,"start_time":"2024-08-09T13:14:19.264456","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["kNN Neighbors=3\n","Train Accuracy: 0.9890968729098523\n","Train Precision: 0.7869757174392936\n","Train Recall: 0.41695906432748536\n","Test Accuracy: 0.9839478120647951\n","Test Precision: 0.5\n","Test Recall: 0.21689497716894976\n","Confusion Matrix for Training Data:\n","[[107240    193]\n"," [   997    713]]\n","Confusion Matrix for Test Data:\n","[[26753    95]\n"," [  343    95]]\n","kNN Neighbors=5\n","Train Accuracy: 0.9880706962425442\n","Train Precision: 0.7873239436619718\n","Train Recall: 0.32690058479532164\n","Test Accuracy: 0.9847174375137433\n","Test Precision: 0.5724137931034483\n","Test Recall: 0.18949771689497716\n","Confusion Matrix for Training Data:\n","[[107282    151]\n"," [  1151    559]]\n","Confusion Matrix for Test Data:\n","[[26786    62]\n"," [  355    83]]\n","kNN Neighbors=7\n","Train Accuracy: 0.9869162474918226\n","Train Precision: 0.7397959183673469\n","Train Recall: 0.2543859649122807\n","Test Accuracy: 0.9851572234845708\n","Test Precision: 0.6240601503759399\n","Test Recall: 0.18949771689497716\n","Confusion Matrix for Training Data:\n","[[107280    153]\n"," [  1275    435]]\n","Confusion Matrix for Test Data:\n","[[26798    50]\n"," [  355    83]]\n","kNN Neighbors=9\n","Train Accuracy: 0.9863665099914791\n","Train Precision: 0.7351694915254238\n","Train Recall: 0.20292397660818715\n","Test Accuracy: 0.9853771164699846\n","Test Precision: 0.6788990825688074\n","Test Recall: 0.1689497716894977\n","Confusion Matrix for Training Data:\n","[[107308    125]\n"," [  1363    347]]\n","Confusion Matrix for Test Data:\n","[[26813    35]\n"," [  364    74]]\n"]}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","# Split 80% train 20% test random\n","x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","configuration = [3,5,7,9] #we select 4 configuration and try to make the most accuracy neighbors \n","for i in configuration :#every loop we will try diffrent config\n","    kNN_model = KNeighborsClassifier(n_neighbors= i) #create KNeighborsClassifier with i neighbors\n","    kNN_model.fit(x_train, y_train)#fiting\n","    y_train_pred = kNN_model.predict(x_train) #make predict for train\n","    y_test_pred = kNN_model.predict(x_test) #make predict for test\n","    #train result\n","    train_accuracy = accuracy_score(y_train, y_train_pred) #find the accuracy\n","    train_precision = precision_score(y_train, y_train_pred, pos_label=1) #find the precision\n","    train_recall = recall_score(y_train, y_train_pred, pos_label=1) #find the recall\n","    #test result\n","    test_accuracy = accuracy_score(y_test, y_test_pred) #find the accuracy\n","    test_precision = precision_score(y_test, y_test_pred, pos_label=1)#find the precision\n","    test_recall = recall_score(y_test, y_test_pred, pos_label=1)#find the recall\n","    \n","    train_cm = confusion_matrix(y_train, y_train_pred)#confusion_matrix for train\n","    test_cm = confusion_matrix(y_test, y_test_pred)#confusion_matrix for test\n","    \n","    print(f\"kNN Neighbors={i}\")\n","    print(\"Train Accuracy:\", train_accuracy)\n","    print(\"Train Precision:\", train_precision)\n","    print(\"Train Recall:\", train_recall)\n","    print(\"Test Accuracy:\", test_accuracy)\n","    print(\"Test Precision:\", test_precision)\n","    print(\"Test Recall:\", test_recall)\n","    print(\"Confusion Matrix for Training Data:\")\n","    print(train_cm)\n","    print(\"Confusion Matrix for Test Data:\")\n","    print(test_cm)"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5498973,"sourceId":9110866,"sourceType":"datasetVersion"}],"dockerImageVersionId":30746,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":64.591932,"end_time":"2024-08-09T13:15:13.483597","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-08-09T13:14:08.891665","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}